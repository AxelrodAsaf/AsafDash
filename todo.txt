// Signup
    + On submit signup form, take the data and save as an object
    + Take newUser object and send to server
    + Connect server to Mongodb
    + Check to make sure that the user's email is unique (no existing users with that email)
    + Encryption of password (and sending the encrypted password to the database)
    + Add the newUser to database
    + Check why there isn't an error while trying to signup a used email
    + Clean code and commit
    + Catch all Axios errors

// .ENV
    + Create an .env file
    + Add the .env to .gitignore
    + Move the keys from their original files to the .env
        + Weather API key
        + Currency converter USD to NIS
            + URL
            + API KEY
            + API HOST
        + Currency converter NIS to USD
            + URL
            + API KEY
            + API HOST
        + News API keys
        + Mongodb url (on server side)

// Login
    + Receive inputs from the user (frontend)
    + Send the inputs to the server (frontend -> backend)
    + Check the database for the given email (backend)
    + Check to see if the password entered matches the encrypted password
    + Send the client the token after signing in
    + Save the token to local storage
    + Deal with errors of incorrect password, unknown email, etc.
    + Update 'Logged in' statuses where needed (localStorage)
    + Log out function - delete from localStorage and wherever needed
    + Move the secret key for JWT to the .env file
    + Client sends the token to the server
    + Server verifies the token and returns success or failure
    + Verify the token on every request from the client on the server
        + On success, set the email on the request and call next function
        + On failure, call next function without personal data

// Move getInfo and updateInfo to Controller (separate file)

// myHub
    - News
        -----Use Postman to test these functions-----
        + (backend) Find out how to save an array in a user's document in the database
        + (backend) Add to the user schema the news topics array (with default values)
        + (backend) Fetch the data from the database to send to the client for displaying - using an app.get function
            + Get the user email from the token
                + If no user, send default values to the client
                + If user, find in database
                    + If user not found in database, send an error
                    + If a user is found in the database send the news topics to the client
        === (backend) Take the data from the request body and not the headers from the client ===
        + (backend) Write a function to update the topics array + using an app.put
            + If no user, send an error
                + If user, update news topics in database
        + (backend) Clean and commit
        ----------------------------------------------------------------
        + (frontend) If there is a user signed in, send the server the token - use axios.get('/news')
        + (frontend) Fetch the list of news topics from the server - use axios.get
            + Sending the token to the backend
            + Receive the news topics data
        + (frontend) Display news topics onscreen in a list
        + (frontend) Add an input box and +/-/update buttons to the frontend
        + (frontend) Using the update/save button, send the data to the server - use axios.put/axios.post function
            + Send the token to the backend
            + Send the updated news topics array to the backend
        + (frontend) CSS
        + (frontend) Clean and commit

// News
    + Get the array of news topics from the server - use axios.get
    + Send the data to the NewsSection component to display the news topics properly
    + Display the data how it's supposed to be displayed

// Weather
    + Make widget style boxes
    + Get the list of weather cities to display
    + Map through the cities and display in a widget
    + CSS

// Calendar
    - Add upcoming events from calendar to home screen

// Home
    - Top 3 to do list items
    - Top 5 songs Israel/USA

// Change login and submit forms email to "type email"



REACT_APP_NEWS_KEY_ONE   = 6b4371ea45744fdf87de113942f6b4f3
  # AxelrodAsaf@gmail.com
REACT_APP_NEWS_KEY_TWO   = 034d8076f89846f0825e0597f0b86436
  # AsafAxelrod@hotmail.com
REACT_APP_NEWS_KEY_THREE = 0632572e209741d1ab2c411be921a1fc
  # Aajunk3113@hotmail.com
REACT_APP_NEWS_KEY_FOUR  = 2023604cc05c4d5089f789c3e203cf04
  # AsafAxelrod@gmail.com